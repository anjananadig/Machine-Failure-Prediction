# -*- coding: utf-8 -*-
"""Machine failure prediction .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_iQF6bvPqNwFROADsZ6y0BOUB7EJwAeD
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

data = pd.read_csv('/content/data (1).csv')
print(data)

data.shape

data.head()

data.tail()

data.info()

print(data.isnull().sum())

data.columns

len(data.columns)

data.describe()

sns.countplot(x='fail', data=data, palette='bright')
plt.xlabel("Machine Failure")
plt.ylabel("Count")
plt.title("Distribution of Machine Failures")
plt.show()

plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap="plasma")
plt.title("Correlation Heatmap")
plt.show()

# Features and target
X = data.drop(columns=['fail'])
y = data['fail']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

from sklearn.preprocessing import StandardScaler

# Initialize the scaler
scaler = StandardScaler()

# Fit and transform the training data, and transform the testing data
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

from sklearn.linear_model import LogisticRegression

# Initialize the modele
model = LogisticRegression(random_state=42)

model.fit(X_train_scaled, y_train)
y_pred = model.predict(X_test_scaled)

from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, classification_report

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Precision and Recall
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
print("Precision:", precision)
print("Recall:", recall)

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['No Failure', 'Failure'], yticklabels=['No Failure', 'Failure'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted Labels')
plt.ylabel('Actual Labels')
plt.show()

# Classification Report
print("Classification Report:\n", classification_report(y_test, y_pred))